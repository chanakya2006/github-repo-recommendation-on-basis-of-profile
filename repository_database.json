{
  "repositories": [
    {
      "owner": "chanakya2006",
      "name": "github-repo-recommendation-on-basis-of-profile",
      "url": "https://github.com/chanakya2006/github-repo-recommendation-on-basis-of-profile",
      "description": "",
      "readme_content": "Foss-Hackathon-2025\nWe Going Big with this one",
      "languages": {},
      "topics": [],
      "stars": 0,
      "forks": 0,
      "last_updated": "2025-02-22T17:37:13.549258"
    },
    {
      "owner": "chanakya2006",
      "name": "fitness_api",
      "url": "https://github.com/chanakya2006/fitness_api",
      "description": "",
      "readme_content": "My first time creating a backend in GO using ECHO.",
      "languages": {
        "GO": 1,
        "Go": 1,
        "go": 1
      },
      "topics": [
        "Go"
      ],
      "stars": 0,
      "forks": 0,
      "last_updated": "2025-02-22T17:37:14.459499"
    },
    {
      "owner": "chanakya2006",
      "name": "pdf_chatbot",
      "url": "https://github.com/chanakya2006/pdf_chatbot",
      "description": "",
      "readme_content": "",
      "languages": {},
      "topics": [],
      "stars": 0,
      "forks": 0,
      "last_updated": "2025-02-22T17:37:15.259895"
    },
    {
      "owner": "chanakya2006",
      "name": "python",
      "url": "https://github.com/chanakya2006/python",
      "description": "",
      "readme_content": "python",
      "languages": {
        "Python": 1,
        "python": 1
      },
      "topics": [
        "Python"
      ],
      "stars": 0,
      "forks": 0,
      "last_updated": "2025-02-22T17:37:16.051134"
    },
    {
      "owner": "gruntwork-io",
      "name": "terragrunt",
      "url": "https://github.com/gruntwork-io/terragrunt",
      "description": "Terragrunt is a flexible orchestration tool that allows Infrastructure as Code written in OpenTofu/Terraform to scale.",
      "readme_content": "Terragrunt\n\n\n\n\n\nTerragrunt is a flexible orchestration tool that allows Infrastructure as Code written in OpenTofu/Terraform to scale.\nPlease see the following for more info, including install instructions and complete documentation:\n\nTerragrunt Website\nGetting started with Terragrunt\nTerragrunt Documentation\nContributing to Terragrunt\nCommercial Support\n\nJoin the Discord!\nJoin our community for discussions, support, and contributions:\n\nLicense\nThis code is released under the MIT License. See LICENSE.txt.",
      "languages": {},
      "topics": [],
      "stars": 0,
      "forks": 0,
      "last_updated": "2025-02-22T17:37:18.438339"
    },
    {
      "owner": "dagger",
      "name": "dagger",
      "url": "https://github.com/dagger/dagger",
      "description": "An engine to run your pipelines in containers",
      "readme_content": "What is Dagger?\nDagger is a tool that lets you replace your software project's artisanal scripts with a modern API and cross-language scripting engine.\n\nEncapsulate all your project's tasks and workflows into simple functions, written in your programming language of choice\nDagger packages your functions into a custom GraphQL API\nRun your functions from the CLI, your language interpreter, or a custom HTTP client\nPackage your functions into a module, to reuse in your next project or share with the community\nSearch the Daggerverse for existing modules, and import them into yours. All Dagger modules can reuse each other's functions - across language.\n\nBenefits to app teams\n\nReduce complexity: even complex builds can be expressed as a few simple functions\nNo more \"push and pray\": everything CI can do, your dev environment can do too\nUse the same language to develop your app and its scripts\nEasy onboarding of new developers: if you can build, test and deploy - they can too.\nEverything is cached by default: expect 2x to 10x speedups\nParity between dev and CI environments\nCross-team collaboration: reuse another team's workflows without learning their stack\n\nBenefits to platform teams\n\nReduce CI lock-in. Dagger functions run on all major CI platforms - no proprietary DSL needed.\nDon't be a bottleneck. Let app teams write their own functions. Enable standardization by providing them a library of reusable components.\nFaster CI runs. CI pipelines that are \"Daggerized\" typically run 2x to 10x faster, thanks to caching and concurrency. This means developers waste less time waiting for CI, and you spend less money on CI compute.\nA viable platform strategy. App teams need flexibility, and you need control. Dagger gives you a way to reconcile the two, in an incremental way that leverages the stack you already have.\n\nLearn more\n\nHow does it work?\nQuickstart\nCookbook\n\nJoin the community\n\nJoin the Dagger community server\nFollow us on Twitter\nCheck out our community activities\nRead more in our documentation\n\nContributing\nInterested in contributing or building dagger from scratch? See\nCONTRIBUTING.md.",
      "languages": {},
      "topics": [
        "GraphQL"
      ],
      "stars": 0,
      "forks": 0,
      "last_updated": "2025-02-22T17:37:19.320519"
    },
    {
      "owner": "evcc-io",
      "name": "evcc",
      "url": "https://github.com/evcc-io/evcc",
      "description": "Solar Charging ‚òÄÔ∏èüöò",
      "readme_content": "evcc üöò‚òÄÔ∏è\n\n\n\n\n\nevcc is an extensible EV Charge Controller and home energy management system. Featured in PV magazine.\n\nFeatures\n\nsimple and clean user interface\nwide range of supported chargers:\n\nABL eMH1, Alfen (Eve), Bender (CC612/613), cFos (PowerBrain), Daheimladen, Ebee (Wallbox), Ensto (Chago Wallbox), EVSEWifi/ smartWB, Garo (GLB, GLB+, LS4), go-eCharger, HardyBarth (eCB1, cPH1, cPH2), Heidelberg (Energy Control), Innogy (eBox), Juice (Charger Me), KEBA/BMW, Mennekes (Amedio, Amtron Premium/Xtra, Amtron ChargeConrol), older NRGkicks (before 2022/2023), NRGKick Gen2,openWB (includes Pro), Optec (Mobility One), PC Electric (includes Garo), Siemens, TechniSat (Technivolt), Tinkerforge Warp Charger, Ubitricity (Heinz), Vestel, Wallbe, Webasto (Live), Mobile Charger Connect and many more\nEEBus support (Elli, PMCC)\nexperimental OCPP support\nBuild-your-own: Phoenix Contact (includes ESL Walli), EVSE DIN\nSmart-Home outlets: FritzDECT, Shelly, Tasmota, TP-Link\n\n\nwide range of supported meters for grid, pv, battery and charger:\n\nModBus: Eastron SDM, MPM3PM, ORNO WE, SBC ALE3 and many more, see https://github.com/volkszaehler/mbmd#supported-devices for a complete list\nIntegrated systems: SMA Sunny Home Manager and Energy Meter, KOSTAL Smart Energy Meter (KSEM, EMxx)\nSunspec-compatible inverter or home battery devices: Fronius, SMA, SolarEdge, KOSTAL, STECA, E3DC, ...\nand various others: Discovergy, Tesla PowerWall, LG ESS HOME, OpenEMS (FENECON)\n\n\nvehicle integration (state of charge, remote charge, battery and preconditioning status):\n\nAudi, BMW, Citro√´n, Dacia, Fiat, Ford, Hyundai, Jaguar, Kia, Landrover, Mercedes-Benz, Mini, Nissan, Opel, Peugeot, Porsche, Renault, Seat, Smart, Skoda, Tesla, Volkswagen, Volvo, ...\nServices: OVMS, Tronity\nScooters: Niu, Silence\n\n\nplugins for integrating with any charger/ meter/ vehicle:\n\nModbus, HTTP, MQTT, Javascript, WebSockets and shell scripts\n\n\nstatus notifications using Telegram, PushOver and many more\nlogging using InfluxDB and Grafana\ngranular charge power control down to mA steps with supported chargers (labeled by e.g. smartWB as OLC)\nREST and MQTT APIs for integration with home automation systems\nAdd-ons for Home Assistant and OpenHAB (not maintained by the evcc core team)\n\nGetting Started\nYou'll find everything you need in our documentation.\nContributing\nTechnical details on how to contribute, how to add translations and how to build evcc from source can be found here.\n\nSponsorship\n\nevcc believes in open source software. We're committed to provide best in class EV charging experience.\nMaintaining evcc consumes time and effort. With the vast amount of different devices to support, we depend on community and vendor support to keep evcc alive.\nWhile evcc is open source, we would also like to encourage vendors to provide open source hardware devices, public documentation and support open source projects like ours that provide additional value to otherwise closed hardware. Where this is not the case, evcc requires \"sponsor token\" to finance ongoing development and support of evcc.\nLearn more about our sponsorship model.",
      "languages": {
        "JavaScript": 1,
        "GO": 1,
        "Go": 1,
        "go": 1,
        "Shell": 1,
        "javascript": 1
      },
      "topics": [
        "JavaScript",
        "Go",
        "Shell"
      ],
      "stars": 0,
      "forks": 0,
      "last_updated": "2025-02-22T17:37:20.213494"
    },
    {
      "owner": "cilium",
      "name": "cilium",
      "url": "https://github.com/cilium/cilium",
      "description": "eBPF-based Networking, Security, and Observability",
      "readme_content": "Cilium is a networking, observability, and security solution with an eBPF-based\ndataplane. It provides a simple flat Layer 3 network with the ability to span\nmultiple clusters in either a native routing or overlay mode. It is L7-protocol\naware and can enforce network policies on L3-L7 using an identity based security\nmodel that is decoupled from network addressing.\nCilium implements distributed load balancing for traffic between pods and to\nexternal services, and is able to fully replace kube-proxy, using efficient\nhash tables in eBPF allowing for almost unlimited scale. It also supports\nadvanced functionality like integrated ingress and egress gateway, bandwidth\nmanagement and service mesh, and provides deep network and security visibility and monitoring.\nA new Linux kernel technology called eBPF is at the foundation of Cilium. It\nsupports dynamic insertion of eBPF bytecode into the Linux kernel at various\nintegration points such as: network IO, application sockets, and tracepoints to\nimplement security, networking and visibility logic. eBPF is highly efficient\nand flexible. To learn more about eBPF, visit eBPF.io.\n\n\n\n\n\n\n\n\n\n\n\n\n\nStable Releases\nThe Cilium community maintains minor stable releases for the last three minor\nCilium versions. Older Cilium stable versions from minor releases prior to that\nare considered EOL.\nFor upgrades to new minor releases please consult the Cilium Upgrade Guide.\nListed below are the actively maintained release branches along with their latest\npatch release, corresponding image pull tags and their release notes:\n\n\nv1.17\n2025-02-12\nquay.io/cilium/cilium:v1.17.1\nRelease Notes\n\nv1.16\n2025-02-13\nquay.io/cilium/cilium:v1.16.7\nRelease Notes\n\nv1.15\n2025-02-18\nquay.io/cilium/cilium:v1.15.14\nRelease Notes\n\n\n\n\nArchitectures\nCilium images are distributed for AMD64 and AArch64 architectures.\n\nSoftware Bill of Materials\nStarting with Cilium version 1.13.0, all images include a Software Bill of\nMaterials (SBOM). The SBOM is generated in SPDX format. More information\non this is available on Cilium SBOM.\n\nDevelopment\nFor development and testing purpose, the Cilium community publishes snapshots,\nearly release candidates (RC) and CI container images build from the main\nbranch. These images are\nnot for use in production.\nFor testing upgrades to new development releases please consult the latest\ndevelopment build of the Cilium Upgrade Guide.\nListed below are branches for testing along with their snapshots or RC releases,\ncorresponding image pull tags and their release notes where applicable:\n\n\nmain\ndaily\nquay.io/cilium/cilium-ci:latest\nN/A\n\nv1.17.0-rc.2\n2025-01-24\nquay.io/cilium/cilium:v1.17.0-rc.2\nPre Release Candidate Notes\n\n\n\n\nFunctionality Overview\n\nProtect and secure APIs transparently\nAbility to secure modern application protocols such as REST/HTTP, gRPC and\nKafka. Traditional firewalls operate at Layer 3 and 4. A protocol running on a\nparticular port is either completely trusted or blocked entirely. Cilium\nprovides the ability to filter on individual application protocol requests such\nas:\n\nAllow all HTTP requests with method GET and path /public/.*. Deny all\nother requests.\nAllow service1 to produce on Kafka topic topic1 and service2 to\nconsume on topic1. Reject all other Kafka messages.\nRequire the HTTP header X-Token: [0-9]+ to be present in all REST calls.\n\nSee the section Layer 7 Policy in our documentation for the latest list of\nsupported protocols and examples on how to use it.\n\nSecure service to service communication based on identities\nModern distributed applications rely on technologies such as application\ncontainers to facilitate agility in deployment and scale out on demand. This\nresults in a large number of application containers being started in a short\nperiod of time. Typical container firewalls secure workloads by filtering on\nsource IP addresses and destination ports. This concept requires the firewalls\non all servers to be manipulated whenever a container is started anywhere in\nthe cluster.\nIn order to avoid this situation which limits scale, Cilium assigns a security\nidentity to groups of application containers which share identical security\npolicies. The identity is then associated with all network packets emitted by\nthe application containers, allowing to validate the identity at the receiving\nnode. Security identity management is performed using a key-value store.\n\nSecure access to and from external services\nLabel based security is the tool of choice for cluster internal access control.\nIn order to secure access to and from external services, traditional CIDR based\nsecurity policies for both ingress and egress are supported. This allows to\nlimit access to and from application containers to particular IP ranges.\n\nSimple Networking\nA simple flat Layer 3 network with the ability to span multiple clusters\nconnects all application containers. IP allocation is kept simple by using host\nscope allocators. This means that each host can allocate IPs without any\ncoordination between hosts.\nThe following multi node networking models are supported:\n\nOverlay: Encapsulation-based virtual network spanning all hosts.\nCurrently, VXLAN and Geneve are baked in but all encapsulation formats\nsupported by Linux can be enabled.\nWhen to use this mode: This mode has minimal infrastructure and integration\nrequirements. It works on almost any network infrastructure as the only\nrequirement is IP connectivity between hosts which is typically already\ngiven.\n\nNative Routing: Use of the regular routing table of the Linux host.\nThe network is required to be capable to route the IP addresses of the\napplication containers.\nWhen to use this mode: This mode is for advanced users and requires some\nawareness of the underlying networking infrastructure. This mode works well\nwith:\n\nNative IPv6 networks\nIn conjunction with cloud network routers\nIf you are already running routing daemons\n\n\n\n\nLoad Balancing\nCilium implements distributed load balancing for traffic between application\ncontainers and to external services and is able to fully replace components\nsuch as kube-proxy. The load balancing is implemented in eBPF using efficient\nhashtables allowing for almost unlimited scale.\nFor north-south type load balancing, Cilium's eBPF implementation is optimized\nfor maximum performance, can be attached to XDP (eXpress Data Path), and supports\ndirect server return (DSR) as well as Maglev consistent hashing if the load\nbalancing operation is not performed on the source host.\nFor east-west type load balancing, Cilium performs efficient service-to-backend\ntranslation right in the Linux kernel's socket layer (e.g. at TCP connect time)\nsuch that per-packet NAT operations overhead can be avoided in lower layers.\n\nBandwidth Management\nCilium implements bandwidth management through efficient EDT-based (Earliest Departure\nTime) rate-limiting with eBPF for container traffic that is egressing a node. This\nallows to significantly reduce transmission tail latencies for applications and to\navoid locking under multi-queue NICs compared to traditional approaches such as HTB\n(Hierarchy Token Bucket) or TBF (Token Bucket Filter) as used in the bandwidth CNI\nplugin, for example.\n\nMonitoring and Troubleshooting\nThe ability to gain visibility and troubleshoot issues is fundamental to the\noperation of any distributed system. While we learned to love tools like\ntcpdump and ping and while they will always find a special place in our\nhearts, we strive to provide better tooling for troubleshooting. This includes\ntooling to provide:\n\nEvent monitoring with metadata: When a packet is dropped, the tool doesn't\njust report the source and destination IP of the packet, the tool provides\nthe full label information of both the sender and receiver among a lot of\nother information.\nMetrics export via Prometheus: Key metrics are exported via Prometheus for\nintegration with your existing dashboards.\nHubble: An observability platform specifically written for Cilium. It\nprovides service dependency maps, operational monitoring and alerting,\nand application and security visibility based on flow logs.\n\n\nGetting Started\n\nWhy Cilium?\nGetting Started\nArchitecture and Concepts\nInstalling Cilium\nFrequently Asked Questions\nContributing\n\n\nCommunity\n\nSlack\nJoin the Cilium Slack channel to chat with\nCilium developers and other Cilium users. This is a good place to learn about\nCilium, ask questions, and share your experiences.\n\nSpecial Interest Groups (SIG)\nSee Special Interest groups for a list of all SIGs and their meeting times.\n\nDeveloper meetings\nThe Cilium developer community hangs out on Zoom to chat. Everybody is welcome.\n\nWeekly, Wednesday,\n5:00 pm Europe/Zurich time (CET/CEST),\nusually equivalent to 8:00 am PT, or 11:00 am ET. Meeting Notes and Zoom Info\nThird Wednesday of each month, 9:00 am Japan time (JST). APAC Meeting Notes and Zoom Info\n\n\neBPF & Cilium Office Hours livestream\nWe host a weekly community YouTube livestream called eCHO which (very loosely!) stands for eBPF & Cilium Office Hours. Join us live, catch up with past episodes, or head over to the eCHO repo and let us know your ideas for topics we should cover.\n\nGovernance\nThe Cilium project is governed by a group of Maintainers and Committers.\nHow they are selected and govern is outlined in our governance document.\n\nAdopters\nA list of adopters of the Cilium project who are deploying it in production, and of their use cases,\ncan be found in file USERS.md.\n\nLicense\nThe Cilium user space components are licensed under the\nApache License, Version 2.0.\nThe BPF code templates are dual-licensed under the\nGeneral Public License, Version 2.0 (only)\nand the 2-Clause BSD License\n(you can use the terms of either license, at your option).",
      "languages": {},
      "topics": [
        "gRPC"
      ],
      "stars": 0,
      "forks": 0,
      "last_updated": "2025-02-22T17:37:21.322949"
    },
    {
      "owner": "veops",
      "name": "oneterm",
      "url": "https://github.com/veops/oneterm",
      "description": "Provide secure access and control over all infrastructure",
      "readme_content": "A Simple, Lightweight, Flexible Bastion Host.\n\n\n\n\n\n  English ¬∑ ‰∏≠Êñá(ÁÆÄ‰Ωì)\n\nWhat is OneTerm\nOneTerm is a simple, lightweight and flexible enterprise-class bastion host, designed and developed based on 4A compliant, i.e. Authen, Authorize, Account, and Audit, which ensures the security and compliance of the system through strict access control and monitoring features.\n\nProduct documentÔºöhttps://veops.cn/docs/docs/oneterm/onterm_design\nPreview onlineÔºöOneTerm\n\nusername: demo or admin\npassword: 123456\n\n\nATTENTION: branch main may be unstable as the result of continued development, Please use releases to get the latest stable version\n\nCore Feature\n\n\nAccess control: Acting as an intermediary, OneTerm restricts direct access to critical systems. Users must authenticate through OneTerm before accessing other servers or systems.\n\n\nSecurity audit: OneTerm can record user logins and activities, providing audit logs for investigation in case of security incidents. This ensures that every user's actions are traceable and auditable.\n\n\nJump access to: OneTerm offers a jump host mechanism, allowing users to connect to other internal servers through OneTerm. This helps reduce the risk of exposing internal servers directly to the outside, as only OneTerm needs to be accessible externally.\n\n\nPassword management: OneTerm can enforce robust password policies and centrally manage passwords through a single entry point. This helps improve the overall system's password security.\n\n\nSession recording: OneTerm can record user sessions with servers, which is valuable for monitoring and investigating privileged user activities. In case of security incidents, session recordings can be replayed to understand detailed operations.\n\n\nPrevent direct attacks: Since OneTerm is the sole entry point for systems and resources, it can serve as a primary obstacle for attackers. This helps reduce the risk of direct attacks on internal systems.\n\n\nUnified access: OneTerm provides a single entry point through which users can access different systems without needing to remember multiple login credentials. This enhances user convenience and work efficiency.\n\n\nProduct Advantage\n\nAuthentication and Authorization: Authentication and Authorization: OneTerm should have a robust and flexible identity authentication and authorization mechanism. This includes supporting multi-factor authentication to ensure that only authorized users can access internal network resources and enabling fine-grained management of user permissions.\nSecure communication: OneTerm supports secure communication protocols and encryption technologies to protect data transmission between users and internal servers. This helps prevent man-in-the-middle attacks and data leakage.\nAudit and monitoring: OneTerm features powerful audit and monitoring capabilities, recording user activities and generating audit logs. This helps trace security incidents, identify potential threats, and meet compliance requirements.\nRemote Management and Session Isolation: OneTerm supports remote management, allowing administrators to securely manage internal servers. Additionally, it should have session isolation functionality to ensure that access between users is isolated from each other, preventing lateral movement attacks.\nCombination with open source CMDB: Oneterm is combined with VE CMDB (which has been open source), users can import assets in CMDB with one click, ensuring easy operation and smooth process.\n\nTech Stack\n\nBack-end: Go\nFront-end: Vue.js\nUI component library: Ant Design Vue\n\nGetting started & staying tuned with us\nStar us, and you will receive all releases notifications from GitHub without any delay!\n\nOverview\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nQuick Start\n\ndocker-compose install\ngit clone https://github.com/veops/oneterm.git\ncd oneterm/deploy\ndocker compose up -d\n\nvisit\n\nOpen your browser and visit: http://127.0.0.1:8666\nUsername: admin\nPassword: 123456\n\n\n\nContributing\nWe welcome all developers to contribute code to improve and extend this project. Please read our contribution guidelines first. Additionally, you can support Veops open source through social media, events, and sharing.\n\n\n\nMore Open Source\n\nCMDB: Simple, lightweight, and versatile operational CMDB\nACL: A general permission control management system.\nmessenger: A simple and lightweight message sending service.\n\nCommunity\n\nEmail: bd@veops.cn\nWeChat official account: Welcome to follow our WeChat official account and join our group channels",
      "languages": {
        "GO": 1,
        "Go": 1,
        "go": 1
      },
      "topics": [
        "Docker",
        "Go"
      ],
      "stars": 0,
      "forks": 0,
      "last_updated": "2025-02-22T17:37:22.257366"
    },
    {
      "owner": "moby",
      "name": "moby",
      "url": "https://github.com/moby/moby",
      "description": "The Moby Project - a collaborative project for the container ecosystem to assemble container-based systems",
      "readme_content": "The Moby Project\n\n\n\n\nMoby is an open-source project created by Docker to enable and accelerate software containerization.\nIt provides a \"Lego set\" of toolkit components, the framework for assembling them into custom container-based systems, and a place for all container enthusiasts and professionals to experiment and exchange ideas.\nComponents include container build tools, a container registry, orchestration tools, a runtime and more, and these can be used as building blocks in conjunction with other tools and projects.\nPrinciples\nMoby is an open project guided by strong principles, aiming to be modular, flexible and without too strong an opinion on user experience.\nIt is open to the community to help set its direction.\n\nModular: the project includes lots of components that have well-defined functions and APIs that work together.\nBatteries included but swappable: Moby includes enough components to build fully featured container systems, but its modular architecture ensures that most of the components can be swapped by different implementations.\nUsable security: Moby provides secure defaults without compromising usability.\nDeveloper focused: The APIs are intended to be functional and useful to build powerful tools.\nThey are not necessarily intended as end user tools but as components aimed at developers.\nDocumentation and UX is aimed at developers not end users.\n\nAudience\nThe Moby Project is intended for engineers, integrators and enthusiasts looking to modify, hack, fix, experiment, invent and build systems based on containers.\nIt is not for people looking for a commercially supported system, but for people who want to work and learn with open source code.\nRelationship with Docker\nThe components and tools in the Moby Project are initially the open source components that Docker and the community have built for the Docker Project.\nNew projects can be added if they fit with the community goals. Docker is committed to using Moby as the upstream for the Docker Product.\nHowever, other projects are also encouraged to use Moby as an upstream, and to reuse the components in diverse ways, and all these uses will be treated in the same way. External maintainers and contributors are welcomed.\nThe Moby project is not intended as a location for support or feature requests for Docker products, but as a place for contributors to work on open source code, fix bugs, and make the code more useful.\nThe releases are supported by the maintainers, community and users, on a best efforts basis only. For customers who want enterprise or commercial support, Docker Desktop and Mirantis Container Runtime are the appropriate products for these use cases.\n\nLegal\nBrought to you courtesy of our legal counsel. For more context,\nplease see the NOTICE document in this repo.\nUse and transfer of Moby may be subject to certain restrictions by the\nUnited States and other governments.\nIt is your responsibility to ensure that your use and/or transfer does not\nviolate applicable laws.\nFor more information, please see https://www.bis.doc.gov\nLicensing\nMoby is licensed under the Apache License, Version 2.0. See\nLICENSE for the full\nlicense text.",
      "languages": {},
      "topics": [
        "Docker"
      ],
      "stars": 0,
      "forks": 0,
      "last_updated": "2025-02-22T17:37:23.149770"
    },
    {
      "owner": "beego",
      "name": "beego",
      "url": "https://github.com/beego/beego",
      "description": "beego is an open-source, high-performance web framework for the Go programming language.",
      "readme_content": "Beego   \nBeego is used for rapid development of enterprise application in Go, including RESTful APIs, web apps and backend services.\nIt is inspired by Tornado, Sinatra and Flask. beego has some Go-specific features such as interfaces and struct embedding.\nQuick Start\n\nNew Doc Website - unavailable\nNew Doc Website Backup @flycash\nNew Doc Website source code\nOld Doc - github\nExample\n\n\nKindly remind that sometimes the HTTPS certificate is expired, you may get some NOT SECURE warning\n\nWeb Application\nCreate hello directory, cd hello directory\nmkdir hello\ncd hello\n\nInit module\ngo mod init\n\nDownload and install\ngo get github.com/beego/beego/v2@latest\n\nCreate file hello.go\npackage main\n\nimport \"github.com/beego/beego/v2/server/web\"\n\nfunc main() {\n\tweb.Run()\n}\nDownload required dependencies\ngo mod tidy\n\nBuild and run\ngo build hello.go\n./hello\n\nGo to http://localhost:8080\nCongratulations! You've just built your first beego app.\nFeatures\n\nRESTful support\nMVC architecture\nModularity\nAuto API documents\nAnnotation router\nNamespace\nPowerful development tools\nFull stack for Web & API\n\nModules\n\norm\nsession\nlogs\nconfig\ncache\ncontext\nadmin\nhttplib\ntask\ni18n\n\nCommunity\n\nWelcome to join us in Slack: https://beego.slack.com invite,\nQQ Group ID:523992905\nContribution Guide.\n\nLicense\nbeego source code is licensed under the Apache Licence, Version 2.0\n(https://www.apache.org/licenses/LICENSE-2.0.html).",
      "languages": {
        "HTML": 1,
        "GO": 1,
        "Go": 1,
        "go": 1
      },
      "topics": [
        "RESTful APIs",
        "Go"
      ],
      "stars": 0,
      "forks": 0,
      "last_updated": "2025-02-22T17:37:23.986847"
    },
    {
      "owner": "junegunn",
      "name": "fzf",
      "url": "https://github.com/junegunn/fzf",
      "description": "üå∏ A command-line fuzzy finder",
      "readme_content": "Special thanks to:\n\n\n\n\n\nWarp, the intelligent terminal for developers\nAvailable for MacOS and Linux\n\n\n \nfzf is a general-purpose command-line fuzzy finder.\n\nIt's an interactive filter program for any kind of list; files, command\nhistory, processes, hostnames, bookmarks, git commits, etc. It implements\na \"fuzzy\" matching algorithm, so you can quickly type in patterns with omitted\ncharacters and still get the results you want.\nHighlights\n\nüì¶ Portable ‚Äî Distributed as a single binary for easy installation\n‚ö° Blazingly fast ‚Äî Highly optimized code instantly processes millions of items\nüõ†Ô∏è Extremely versatile ‚Äî Fully customizable via an event-action binding mechanism\nüîã Batteries included ‚Äî Includes integration with bash, zsh, fish, Vim, and Neovim\n\nSponsors ‚ù§Ô∏è\nI would like to thank all the sponsors of this project who make it possible for me to continue to improve fzf.\nIf you'd like to sponsor this project, please visit https://github.com/sponsors/junegunn.\n\nTable of Contents\n\nInstallation\n\nUsing Homebrew\nLinux packages\nWindows packages\nUsing git\nBinary releases\nSetting up shell integration\nVim/Neovim plugin\n\n\nUpgrading fzf\nBuilding fzf\nUsage\n\nUsing the finder\nDisplay modes\n\n--height mode\n--tmux mode\n\n\nSearch syntax\nEnvironment variables\nCustomizing the look\nOptions\nDemo\n\n\nExamples\nKey bindings for command-line\nFuzzy completion for bash and zsh\n\nFiles and directories\nProcess IDs\nHost names\nEnvironment variables / Aliases\nCustomizing fzf options for completion\nCustomizing completion source for paths and directories\nSupported commands\nCustom fuzzy completion\n\n\nVim plugin\nAdvanced topics\n\nCustomizing for different types of input\nPerformance\nExecuting external programs\nTurning into a different process\nReloading the candidate list\n\n1. Update the list of processes by pressing CTRL-R\n2. Switch between sources by pressing CTRL-D or CTRL-F\n3. Interactive ripgrep integration\n\n\nPreview window\nPreviewing an image\n\n\nTips\n\nRespecting .gitignore\nFish shell\nfzf Theme Playground\n\n\nRelated projects\nLicense\n\nInstallation\nUsing Homebrew\nYou can use Homebrew (on macOS or Linux) to install fzf.\nbrew install fzf\nImportantTo set up shell integration (key bindings and fuzzy completion),\nsee the instructions below.\n\nfzf is also available via MacPorts: sudo port install fzf\nLinux packages\n\n\n\nPackage Manager\nLinux Distribution\nCommand\n\n\n\n\nAPK\nAlpine Linux\nsudo apk add fzf\n\n\nAPT\nDebian 9+/Ubuntu 19.10+\nsudo apt install fzf\n\n\nConda\n\nconda install -c conda-forge fzf\n\n\nDNF\nFedora\nsudo dnf install fzf\n\n\nNix\nNixOS, etc.\nnix-env -iA nixpkgs.fzf\n\n\nPacman\nArch Linux\nsudo pacman -S fzf\n\n\npkg\nFreeBSD\npkg install fzf\n\n\npkgin\nNetBSD\npkgin install fzf\n\n\npkg_add\nOpenBSD\npkg_add fzf\n\n\nPortage\nGentoo\nemerge --ask app-shells/fzf\n\n\nSpack\n\nspack install fzf\n\n\nXBPS\nVoid Linux\nsudo xbps-install -S fzf\n\n\nZypper\nopenSUSE\nsudo zypper install fzf\n\n\n\nImportantTo set up shell integration (key bindings and fuzzy completion),\nsee the instructions below.\n\n\nWindows packages\nOn Windows, fzf is available via Chocolatey, Scoop,\nWinget, and MSYS2:\n\n\n\nPackage manager\nCommand\n\n\n\n\nChocolatey\nchoco install fzf\n\n\nScoop\nscoop install fzf\n\n\nWinget\nwinget install fzf\n\n\nMSYS2 (pacman)\npacman -S $MINGW_PACKAGE_PREFIX-fzf\n\n\n\nUsing git\nAlternatively, you can \"git clone\" this repository to any directory and run\ninstall script.\ngit clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf\n~/.fzf/install\nThe install script will add lines to your shell configuration file to modify\n$PATH and set up shell integration.\nBinary releases\nYou can download the official fzf binaries from the releases page.\n\nhttps://github.com/junegunn/fzf/releases\n\nSetting up shell integration\nAdd the following line to your shell configuration file.\n\nbash\n# Set up fzf key bindings and fuzzy completion\neval \"$(fzf --bash)\"\n\nzsh\n# Set up fzf key bindings and fuzzy completion\nsource <(fzf --zsh)\n\nfish\n# Set up fzf key bindings\nfzf --fish | source\n\n\nNote--bash, --zsh, and --fish options are only available in fzf 0.48.0 or\nlater. If you have an older version of fzf, or want finer control, you can\nsource individual script files in the /shell directory. The\nlocation of the files may vary depending on the package manager you use.\nPlease refer to the package documentation for more information.\n(e.g. apt show fzf)\n\nTipYou can disable CTRL-T or ALT-C binding by setting FZF_CTRL_T_COMMAND or\nFZF_ALT_C_COMMAND to an empty string when sourcing the script.\nFor example, to disable ALT-C binding:\n\nbash: FZF_ALT_C_COMMAND= eval \"$(fzf --bash)\"\nzsh: FZF_ALT_C_COMMAND= source <(fzf --zsh)\nfish: fzf --fish | FZF_ALT_C_COMMAND= source\n\nSetting the variables after sourcing the script will have no effect.\n\nVim/Neovim plugin\nIf you use vim-plug, add this to\nyour Vim configuration file:\nPlug 'junegunn/fzf', { 'do': { -> fzf#install() } }\nPlug 'junegunn/fzf.vim'\n\njunegunn/fzf provides the basic library functions\n\nfzf#install() makes sure that you have the latest binary\n\n\njunegunn/fzf.vim is a separate project\nthat provides a variety of useful commands\n\nTo learn more about the Vim integration, see README-VIM.md.\nTipIf you use Neovim and prefer Lua-based plugins, check out\nfzf-lua.\n\nUpgrading fzf\nfzf is being actively developed, and you might want to upgrade it once in a\nwhile. Please follow the instruction below depending on the installation\nmethod used.\n\ngit: cd ~/.fzf && git pull && ./install\nbrew: brew update; brew upgrade fzf\nmacports: sudo port upgrade fzf\nchocolatey: choco upgrade fzf\nvim-plug: :PlugUpdate fzf\n\nBuilding fzf\nSee BUILD.md.\nUsage\nfzf will launch interactive finder, read the list from STDIN, and write the\nselected item to STDOUT.\nfind * -type f | fzf > selected\nWithout STDIN pipe, fzf will traverse the file system under the current\ndirectory to get the list of files.\nvim $(fzf)\nNoteYou can override the default behavior\n\nEither by setting $FZF_DEFAULT_COMMAND to a command that generates the desired list\nOr by setting --walker, --walker-root, and --walker-skip options in $FZF_DEFAULT_OPTS\n\n\nWarningA more robust solution would be to use xargs but we've presented\nthe above as it's easier to grasp\nfzf --print0 | xargs -0 -o vim\n\nTipfzf also has the ability to turn itself into a different process.\nfzf --bind 'enter:become(vim {})'\nSee Turning into a different process\nfor more information.\n\nUsing the finder\n\nCTRL-K / CTRL-J (or CTRL-P / CTRL-N) to move cursor up and down\nEnter key to select the item, CTRL-C / CTRL-G / ESC to exit\nOn multi-select mode (-m), TAB and Shift-TAB to mark multiple items\nEmacs style key bindings\nMouse: scroll, click, double-click; shift-click and shift-scroll on\nmulti-select mode\n\nDisplay modes\nfzf by default runs in fullscreen mode, but there are other display modes.\n--height mode\nWith --height HEIGHT[%], fzf will start below the cursor with the given height.\nfzf --height 40%\nreverse layout and --border goes well with this option.\nfzf --height 40% --layout reverse --border\nBy prepending ~ to the height, you're setting the maximum height.\n# Will take as few lines as possible to display the list\nseq 3 | fzf --height ~100%\nseq 3000 | fzf --height ~100%\nHeight value can be a negative number.\n# Screen height - 3\nfzf --height -3\n--tmux mode\nWith --tmux option, fzf will start in a tmux popup.\n# --tmux [center|top|bottom|left|right][,SIZE[%]][,SIZE[%][,border-native]]\n\nfzf --tmux center         # Center, 50% width and height\nfzf --tmux 80%            # Center, 80% width and height\nfzf --tmux 100%,50%       # Center, 100% width and 50% height\nfzf --tmux left,40%       # Left, 40% width\nfzf --tmux left,40%,90%   # Left, 40% width, 90% height\nfzf --tmux top,40%        # Top, 40% height\nfzf --tmux bottom,80%,40% # Bottom, 80% height, 40% height\n--tmux is silently ignored when you're not on tmux.\nNoteIf you're stuck with an old version of tmux that doesn't support popup,\nor if you want to open fzf in a regular tmux pane, check out\nfzf-tmux script.\n\nTipYou can add these options to $FZF_DEFAULT_OPTS so that they're applied by\ndefault. For example,\n# Open in tmux popup if on tmux, otherwise use --height mode\nexport FZF_DEFAULT_OPTS='--height 40% --tmux bottom,40% --layout reverse --border top'\n\nSearch syntax\nUnless otherwise specified, fzf starts in \"extended-search mode\" where you can\ntype in multiple search terms delimited by spaces. e.g. ^music .mp3$ sbtrkt !fire\n\n\n\nToken\nMatch type\nDescription\n\n\n\n\nsbtrkt\nfuzzy-match\nItems that match sbtrkt\n\n\n'wild\nexact-match (quoted)\nItems that include wild\n\n\n'wild'\nexact-boundary-match (quoted both ends)\nItems that include wild at word boundaries\n\n\n^music\nprefix-exact-match\nItems that start with music\n\n\n.mp3$\nsuffix-exact-match\nItems that end with .mp3\n\n\n!fire\ninverse-exact-match\nItems that do not include fire\n\n\n!^music\ninverse-prefix-exact-match\nItems that do not start with music\n\n\n!.mp3$\ninverse-suffix-exact-match\nItems that do not end with .mp3\n\n\n\nIf you don't prefer fuzzy matching and do not wish to \"quote\" every word,\nstart fzf with -e or --exact option. Note that when  --exact is set,\n'-prefix \"unquotes\" the term.\nA single bar character term acts as an OR operator. For example, the following\nquery matches entries that start with core and end with either go, rb,\nor py.\n^core go$ | rb$ | py$\n\nEnvironment variables\n\nFZF_DEFAULT_COMMAND\n\nDefault command to use when input is tty\ne.g. export FZF_DEFAULT_COMMAND='fd --type f'\n\n\nFZF_DEFAULT_OPTS\n\nDefault options\ne.g. export FZF_DEFAULT_OPTS=\"--layout=reverse --inline-info\"\n\n\nFZF_DEFAULT_OPTS_FILE\n\nIf you prefer to manage default options in a file, set this variable to\npoint to the location of the file\ne.g. export FZF_DEFAULT_OPTS_FILE=~/.fzfrc\n\n\n\nWarningFZF_DEFAULT_COMMAND is not used by shell integration due to the\nslight difference in requirements.\n\nCTRL-T runs $FZF_CTRL_T_COMMAND to get a list of files and directories\nALT-C runs $FZF_ALT_C_COMMAND to get a list of directories\nvim ~/**<tab> runs fzf_compgen_path() with the prefix (~/) as the first argument\ncd foo**<tab> runs fzf_compgen_dir() with the prefix (foo) as the first argument\n\nThe available options are described later in this document.\n\nCustomizing the look\nThe user interface of fzf is fully customizable with a large number of\nconfiguration options. For a quick setup, you can start with one of the style\npresets ‚Äî default, full, or minimal ‚Äî using the --style option.\nfzf --style full \\\n    --preview 'fzf-preview.sh {}' --bind 'focus:transform-header:file --brief {}'\n\n\n\nPreset\nScreenshot\n\n\n\n\ndefault\n\n\n\nfull\n\n\n\nminimal\n\n\n\n\nHere's an example based on the full preset:\n\n\ngit ls-files | fzf --style full \\\n    --border --padding 1,2 \\\n    --border-label ' Demo ' --input-label ' Input ' --header-label ' File Type ' \\\n    --preview 'fzf-preview.sh {}' \\\n    --bind 'result:transform-list-label:\n        if [[ -z $FZF_QUERY ]]; then\n          echo \" $FZF_MATCH_COUNT items \"\n        else\n          echo \" $FZF_MATCH_COUNT matches for [$FZF_QUERY] \"\n        fi\n        ' \\\n    --bind 'focus:transform-preview-label:[[ -n {} ]] && printf \" Previewing [%s] \" {}' \\\n    --bind 'focus:+transform-header:file --brief {} || echo \"No file selected\"' \\\n    --bind 'ctrl-r:change-list-label( Reloading the list )+reload(sleep 2; git ls-files)' \\\n    --color 'border:#aaaaaa,label:#cccccc' \\\n    --color 'preview-border:#9999cc,preview-label:#ccccff' \\\n    --color 'list-border:#669966,list-label:#99cc99' \\\n    --color 'input-border:#996666,input-label:#ffcccc' \\\n    --color 'header-border:#6699cc,header-label:#99ccff'\n\nOptions\nSee the man page (fzf --man or man fzf) for the full list of options.\nDemo\nIf you learn by watching videos, check out this screencast by @samoshkin to explore fzf features.\n\n\n\nExamples\n\nWiki page of examples\n\nDisclaimer: The examples on this page are maintained by the community\nand are not thoroughly tested\n\n\nAdvanced fzf examples\n\nKey bindings for command-line\nBy setting up shell integration, you can use\nthe following key bindings in bash, zsh, and fish.\n\nCTRL-T - Paste the selected files and directories onto the command-line\n\nThe list is generated using --walker file,dir,follow,hidden option\n\nYou can override the behavior by setting FZF_CTRL_T_COMMAND to a custom command that generates the desired list\nOr you can set --walker* options in FZF_CTRL_T_OPTS\n\n\nSet FZF_CTRL_T_OPTS to pass additional options to fzf\n# Preview file content using bat (https://github.com/sharkdp/bat)\nexport FZF_CTRL_T_OPTS=\"\n  --walker-skip .git,node_modules,target\n  --preview 'bat -n --color=always {}'\n  --bind 'ctrl-/:change-preview-window(down|hidden|)'\"\n\nCan be disabled by setting FZF_CTRL_T_COMMAND to an empty string when\nsourcing the script\n\n\nCTRL-R - Paste the selected command from history onto the command-line\n\nIf you want to see the commands in chronological order, press CTRL-R\nagain which toggles sorting by relevance\nPress CTRL-/ or ALT-/ to toggle line wrapping\nSet FZF_CTRL_R_OPTS to pass additional options to fzf\n# CTRL-Y to copy the command into clipboard using pbcopy\nexport FZF_CTRL_R_OPTS=\"\n  --bind 'ctrl-y:execute-silent(echo -n {2..} | pbcopy)+abort'\n  --color header:italic\n  --header 'Press CTRL-Y to copy command into clipboard'\"\n\n\n\nALT-C - cd into the selected directory\n\nThe list is generated using --walker dir,follow,hidden option\nSet FZF_ALT_C_COMMAND to override the default command\n\nOr you can set --walker-* options in FZF_ALT_C_OPTS\n\n\nSet FZF_ALT_C_OPTS to pass additional options to fzf\n# Print tree structure in the preview window\nexport FZF_ALT_C_OPTS=\"\n  --walker-skip .git,node_modules,target\n  --preview 'tree -C {}'\"\n\nCan be disabled by setting FZF_ALT_C_COMMAND to an empty string when\nsourcing the script\n\n\n\nDisplay modes for these bindings can be separately configured via\nFZF_{CTRL_T,CTRL_R,ALT_C}_OPTS or globally via FZF_DEFAULT_OPTS.\n(e.g. FZF_CTRL_R_OPTS='--tmux bottom,60% --height 60% --border top')\nMore tips can be found on the wiki page.\nFuzzy completion for bash and zsh\nFiles and directories\nFuzzy completion for files and directories can be triggered if the word before\nthe cursor ends with the trigger sequence, which is by default **.\n\nCOMMAND [DIRECTORY/][FUZZY_PATTERN]**<TAB>\n\n# Files under the current directory\n# - You can select multiple items with TAB key\nvim **<TAB>\n\n# Files under parent directory\nvim ../**<TAB>\n\n# Files under parent directory that match `fzf`\nvim ../fzf**<TAB>\n\n# Files under your home directory\nvim ~/**<TAB>\n\n\n# Directories under current directory (single-selection)\ncd **<TAB>\n\n# Directories under ~/github that match `fzf`\ncd ~/github/fzf**<TAB>\nProcess IDs\nFuzzy completion for PIDs is provided for kill command.\n# Can select multiple processes with <TAB> or <Shift-TAB> keys\nkill -9 **<TAB>\nHost names\nFor ssh and telnet commands, fuzzy completion for hostnames is provided. The\nnames are extracted from /etc/hosts and ~/.ssh/config.\nssh **<TAB>\ntelnet **<TAB>\nEnvironment variables / Aliases\nunset **<TAB>\nexport **<TAB>\nunalias **<TAB>\nCustomizing fzf options for completion\n# Use ~~ as the trigger sequence instead of the default **\nexport FZF_COMPLETION_TRIGGER='~~'\n\n# Options to fzf command\nexport FZF_COMPLETION_OPTS='--border --info=inline'\n\n# Options for path completion (e.g. vim **<TAB>)\nexport FZF_COMPLETION_PATH_OPTS='--walker file,dir,follow,hidden'\n\n# Options for directory completion (e.g. cd **<TAB>)\nexport FZF_COMPLETION_DIR_OPTS='--walker dir,follow'\n\n# Advanced customization of fzf options via _fzf_comprun function\n# - The first argument to the function is the name of the command.\n# - You should make sure to pass the rest of the arguments ($@) to fzf.\n_fzf_comprun() {\n  local command=$1\n  shift\n\n  case \"$command\" in\n    cd)           fzf --preview 'tree -C {} | head -200'   \"$@\" ;;\n    export|unset) fzf --preview \"eval 'echo \\$'{}\"         \"$@\" ;;\n    ssh)          fzf --preview 'dig {}'                   \"$@\" ;;\n    *)            fzf --preview 'bat -n --color=always {}' \"$@\" ;;\n  esac\n}\nCustomizing completion source for paths and directories\n# Use fd (https://github.com/sharkdp/fd) for listing path candidates.\n# - The first argument to the function ($1) is the base path to start traversal\n# - See the source code (completion.{bash,zsh}) for the details.\n_fzf_compgen_path() {\n  fd --hidden --follow --exclude \".git\" . \"$1\"\n}\n\n# Use fd to generate the list for directory completion\n_fzf_compgen_dir() {\n  fd --type d --hidden --follow --exclude \".git\" . \"$1\"\n}\nSupported commands\nOn bash, fuzzy completion is enabled only for a predefined set of commands\n(complete | grep _fzf to see the list). But you can enable it for other\ncommands as well by using _fzf_setup_completion helper function.\n# usage: _fzf_setup_completion path|dir|var|alias|host COMMANDS...\n_fzf_setup_completion path ag git kubectl\n_fzf_setup_completion dir tree\nCustom fuzzy completion\n(Custom completion API is experimental and subject to change)\nFor a command named \"COMMAND\", define _fzf_complete_COMMAND function using\n_fzf_complete helper.\n# Custom fuzzy completion for \"doge\" command\n#   e.g. doge **<TAB>\n_fzf_complete_doge() {\n  _fzf_complete --multi --reverse --prompt=\"doge> \" -- \"$@\" < <(\n    echo very\n    echo wow\n    echo such\n    echo doge\n  )\n}\n\nThe arguments before -- are the options to fzf.\nAfter --, simply pass the original completion arguments unchanged (\"$@\").\nThen, write a set of commands that generates the completion candidates and\nfeed its output to the function using process substitution (< <(...)).\n\nzsh will automatically pick up the function using the naming convention but in\nbash you have to manually associate the function with the command using the\ncomplete command.\n[ -n \"$BASH\" ] && complete -F _fzf_complete_doge -o default -o bashdefault doge\nIf you need to post-process the output from fzf, define\n_fzf_complete_COMMAND_post as follows.\n_fzf_complete_foo() {\n  _fzf_complete --multi --reverse --header-lines=3 -- \"$@\" < <(\n    ls -al\n  )\n}\n\n_fzf_complete_foo_post() {\n  awk '{print $NF}'\n}\n\n[ -n \"$BASH\" ] && complete -F _fzf_complete_foo -o default -o bashdefault foo\nVim plugin\nSee README-VIM.md.\nAdvanced topics\nCustomizing for different types of input\nSince fzf is a general-purpose text filter, its algorithm was designed to\n\"generally\" work well with any kind of input. However, admittedly, there is no\ntrue one-size-fits-all solution, and you may want to tweak the algorithm and\nsome of the settings depending on the type of the input. To make this process\neasier, fzf provides a set of \"scheme\"s for some common input types.\n\n\n\nScheme\nDescription\n\n\n\n\n--scheme=default\nGeneric scheme designed to work well with any kind of input\n\n\n--scheme=path\nSuitable for file paths\n\n\n--scheme=history\nSuitable for command history or any input where chronological ordering is important\n\n\n\n(See fzf --man for the details)\nPerformance\nfzf is fast. Performance should not be a problem in most use cases. However,\nyou might want to be aware of the options that can affect performance.\n\n--ansi tells fzf to extract and parse ANSI color codes in the input, and it\nmakes the initial scanning slower. So it's not recommended that you add it\nto your $FZF_DEFAULT_OPTS.\n--nth makes fzf slower because it has to tokenize each line.\nA plain string --delimiter should be preferred over a regular expression\ndelimiter.\n--with-nth makes fzf slower as fzf has to tokenize and reassemble each\nline.\n\nExecuting external programs\nYou can set up key bindings for starting external processes without leaving\nfzf (execute, execute-silent).\n# Press F1 to open the file with less without leaving fzf\n# Press CTRL-Y to copy the line to clipboard and aborts fzf (requires pbcopy)\nfzf --bind 'f1:execute(less -f {}),ctrl-y:execute-silent(echo {} | pbcopy)+abort'\nSee KEY BINDINGS section of the man page for details.\nTurning into a different process\nbecome(...) is similar to execute(...)/execute-silent(...) described\nabove, but instead of executing the command and coming back to fzf on\ncomplete, it turns fzf into a new process for the command.\nfzf --bind 'enter:become(vim {})'\nCompared to the seemingly equivalent command substitution vim \"$(fzf)\", this\napproach has several advantages:\n\nVim will not open an empty file when you terminate fzf with\nCTRL-C\nVim will not open an empty file when you press ENTER on an empty\nresult\nCan handle multiple selections even when they have whitespaces\nfzf --multi --bind 'enter:become(vim {+})'\n\n\nTo be fair, running fzf --print0 | xargs -0 -o vim instead of vim \"$(fzf)\"\nresolves all of the issues mentioned. Nonetheless, become(...) still offers\nadditional benefits in different scenarios.\n\nYou can set up multiple bindings to handle the result in different ways\nwithout any wrapping script\nfzf --bind 'enter:become(vim {}),ctrl-e:become(emacs {})'\n\nPreviously, you would have to use --expect=ctrl-e and check the first\nline of the output of fzf\n\n\nYou can easily build the subsequent command using the field index\nexpressions of fzf\n# Open the file in Vim and go to the line\ngit grep --line-number . |\n    fzf --delimiter : --nth 3.. --bind 'enter:become(vim {1} +{2})'\n\n\nReloading the candidate list\nBy binding reload action to a key or an event, you can make fzf dynamically\nreload the candidate list. See #1750 for\nmore details.\n1. Update the list of processes by pressing CTRL-R\nps -ef |\n  fzf --bind 'ctrl-r:reload(ps -ef)' \\\n      --header 'Press CTRL-R to reload' --header-lines=1 \\\n      --height=50% --layout=reverse\n2. Switch between sources by pressing CTRL-D or CTRL-F\nFZF_DEFAULT_COMMAND='find . -type f' \\\n  fzf --bind 'ctrl-d:reload(find . -type d),ctrl-f:reload(eval \"$FZF_DEFAULT_COMMAND\")' \\\n      --height=50% --layout=reverse\n3. Interactive ripgrep integration\nThe following example uses fzf as the selector interface for ripgrep. We bound\nreload action to change event, so every time you type on fzf, the ripgrep\nprocess will restart with the updated query string denoted by the placeholder\nexpression {q}. Also, note that we used --disabled option so that fzf\ndoesn't perform any secondary filtering.\n: | rg_prefix='rg --column --line-number --no-heading --color=always --smart-case' \\\n    fzf --bind 'start:reload:$rg_prefix \"\"' \\\n        --bind 'change:reload:$rg_prefix {q} || true' \\\n        --bind 'enter:become(vim {1} +{2})' \\\n        --ansi --disabled \\\n        --height=50% --layout=reverse\nIf ripgrep doesn't find any matches, it will exit with a non-zero exit status,\nand fzf will warn you about it. To suppress the warning message, we added\n|| true to the command, so that it always exits with 0.\nSee \"Using fzf as interactive Ripgrep launcher\"\nfor more sophisticated examples.\nPreview window\nWhen the --preview option is set, fzf automatically starts an external process\nwith the current line as the argument and shows the result in the split window.\nYour $SHELL is used to execute the command with $SHELL -c COMMAND.\nThe window can be scrolled using the mouse or custom key bindings.\n# {} is replaced with the single-quoted string of the focused line\nfzf --preview 'cat {}'\nPreview window supports ANSI colors, so you can use any program that\nsyntax-highlights the content of a file, such as\nBat or\nHighlight:\nfzf --preview 'bat --color=always {}' --preview-window '~3'\nYou can customize the size, position, and border of the preview window using\n--preview-window option, and the foreground and background color of it with\n--color option. For example,\nfzf --height 40% --layout reverse --info inline --border \\\n    --preview 'file {}' --preview-window up,1,border-horizontal \\\n    --bind 'ctrl-/:change-preview-window(50%|hidden|)' \\\n    --color 'fg:#bbccdd,fg+:#ddeeff,bg:#334455,preview-bg:#223344,border:#778899'\nSee the man page (man fzf) for the full list of options.\nMore advanced examples can be found here.\nWarningSince fzf is a general-purpose text filter rather than a file finder, it is\nnot a good idea to add --preview option to your $FZF_DEFAULT_OPTS.\n# *********************\n# ** DO NOT DO THIS! **\n# *********************\nexport FZF_DEFAULT_OPTS='--preview \"bat --style=numbers --color=always --line-range :500 {}\"'\n\n# bat doesn't work with any input other than the list of files\nps -ef | fzf\nseq 100 | fzf\nhistory | fzf\n\nPreviewing an image\nfzf can display images in the preview window using one of the following protocols:\n\nKitty graphics protocol\niTerm2 inline images protocol\nSixel\n\nSee bin/fzf-preview.sh script for more information.\nfzf --preview 'fzf-preview.sh {}'\nTips\nRespecting .gitignore\nYou can use fd,\nripgrep, or the silver\nsearcher to traverse the file\nsystem while respecting .gitignore.\n# Feed the output of fd into fzf\nfd --type f --strip-cwd-prefix | fzf\n\n# Setting fd as the default source for fzf\nexport FZF_DEFAULT_COMMAND='fd --type f --strip-cwd-prefix'\n\n# Now fzf (w/o pipe) will use the fd command to generate the list\nfzf\n\n# To apply the command to CTRL-T as well\nexport FZF_CTRL_T_COMMAND=\"$FZF_DEFAULT_COMMAND\"\nIf you want the command to follow symbolic links and don't want it to exclude\nhidden files, use the following command:\nexport FZF_DEFAULT_COMMAND='fd --type f --strip-cwd-prefix --hidden --follow --exclude .git'\nFish shell\nCTRL-T key binding of fish, unlike those of bash and zsh, will use the last\ntoken on the command-line as the root directory for the recursive search. For\ninstance, hitting CTRL-T at the end of the following command-line\nls /var/\nwill list all files and directories under /var/.\nWhen using a custom FZF_CTRL_T_COMMAND, use the unexpanded $dir variable to\nmake use of this feature. $dir defaults to . when the last token is not a\nvalid directory. Example:\nset -g FZF_CTRL_T_COMMAND \"command find -L \\$dir -type f 2> /dev/null | sed '1d; s#^\\./##'\"\nfzf Theme Playground\nfzf Theme Playground created by\nVitor Mello is a webpage where you can\ninteractively create fzf themes.\nRelated projects\nhttps://github.com/junegunn/fzf/wiki/Related-projects\nLicense\nThe MIT License (MIT)\nCopyright (c) 2013-2024 Junegunn Choi",
      "languages": {
        "GO": 1,
        "Go": 1,
        "go": 1,
        "Shell": 1,
        "R": 1
      },
      "topics": [
        "R",
        "Lua",
        "Go",
        "Shell"
      ],
      "stars": 0,
      "forks": 0,
      "last_updated": "2025-02-22T17:37:24.928616"
    },
    {
      "owner": "subtrace",
      "name": "subtrace",
      "url": "https://github.com/subtrace/subtrace",
      "description": "Wireshark for Docker containers",
      "readme_content": "Subtrace\nHome ‚Äî Docs ‚Äî Discord\nWireshark for Docker containers\n\nSubtrace is Wireshark for your Docker containers. It lets developers see all\nincoming and outgoing requests in their backend server so that they can resolve\nproduction issues faster.\nFeatures\n\nWorks out-of-the-box\nNo code changes needed\nSupports all languages (Python + Node + Go + everything else)\nSee full payload, headers, status code, and latency\nLess than 100¬µs performance overhead\nBuilt on Clickhouse\nOpen source\n\nCode Contributions\nWhile Subtrace is open source,\nwe're not currently accepting pull requests. This is because we're a startup\nwith a very small team and we don't have the resources or documentation\nnecessary to maintain a good open source community in a way that still allows\nus to move quickly. This will probably change in the future.\nWith that said, we welcome all feature requests and bug reports, so feel free\nto open an issue.",
      "languages": {
        "Python": 1,
        "GO": 1,
        "Go": 1,
        "go": 1,
        "python": 1
      },
      "topics": [
        "Docker",
        "Python",
        "Go"
      ],
      "stars": 0,
      "forks": 0,
      "last_updated": "2025-02-22T17:37:25.823774"
    },
    {
      "owner": "grpc",
      "name": "grpc-go",
      "url": "https://github.com/grpc/grpc-go",
      "description": "The Go language implementation of gRPC. HTTP/2 based RPC",
      "readme_content": "gRPC-Go\n\n\n\nThe Go implementation of gRPC: A high performance, open source, general\nRPC framework that puts mobile and HTTP/2 first. For more information see the\nGo gRPC docs, or jump directly into the quick start.\nPrerequisites\n\nGo: any one of the two latest major releases.\n\nInstallation\nSimply add the following import to your code, and then go [build|run|test]\nwill automatically fetch the necessary dependencies:\nimport \"google.golang.org/grpc\"\n\nNote: If you are trying to access grpc-go from China, see the\nFAQ below.\n\nLearn more\n\nGo gRPC docs, which include a quick start and API\nreference among other resources\nLow-level technical docs from this repository\nPerformance benchmark\nExamples\n\nFAQ\nI/O Timeout Errors\nThe golang.org domain may be blocked from some countries. go get usually\nproduces an error like the following when this happens:\n$ go get -u google.golang.org/grpc\npackage google.golang.org/grpc: unrecognized import path \"google.golang.org/grpc\" (https fetch: Get https://google.golang.org/grpc?go-get=1: dial tcp 216.239.37.1:443: i/o timeout)\nTo build Go code, there are several options:\n\n\nSet up a VPN and access google.golang.org through that.\n\n\nWith Go module support: it is possible to use the replace feature of go mod to create aliases for golang.org packages.  In your project's directory:\ngo mod edit -replace=google.golang.org/grpc=github.com/grpc/grpc-go@latest\ngo mod tidy\ngo mod vendor\ngo build -mod=vendor\nAgain, this will need to be done for all transitive dependencies hosted on\ngolang.org as well. For details, refer to golang/go issue\n#28652.\n\n\nCompiling error, undefined: grpc.SupportPackageIsVersion\nPlease update to the latest version of gRPC-Go using\ngo get google.golang.org/grpc.\nHow to turn on logging\nThe default logger is controlled by environment variables. Turn everything on\nlike this:\n$ export GRPC_GO_LOG_VERBOSITY_LEVEL=99\n$ export GRPC_GO_LOG_SEVERITY_LEVEL=info\nThe RPC failed with error \"code = Unavailable desc = transport is closing\"\nThis error means the connection the RPC is using was closed, and there are many\npossible reasons, including:\n\nmis-configured transport credentials, connection failed on handshaking\nbytes disrupted, possibly by a proxy in between\nserver shutdown\nKeepalive parameters caused connection shutdown, for example if you have\nconfigured your server to terminate connections regularly to trigger DNS\nlookups.\nIf this is the case, you may want to increase your\nMaxConnectionAgeGrace,\nto allow longer RPC calls to finish.\n\nIt can be tricky to debug this because the error happens on the client side but\nthe root cause of the connection being closed is on the server side. Turn on\nlogging on both client and server, and see if there are any transport\nerrors.",
      "languages": {
        "GO": 1,
        "Go": 1,
        "go": 1
      },
      "topics": [
        "Go",
        "gRPC"
      ],
      "stars": 0,
      "forks": 0,
      "last_updated": "2025-02-22T17:37:26.656914"
    }
  ],
  "user_profiles": {
    "chanakya2006": {
      "username": "chanakya2006",
      "bio": "",
      "readme_content": "",
      "repositories": [
        "github-repo-recommendation-on-basis-of-profile",
        "fitness_api",
        "pdf_chatbot",
        "python"
      ],
      "top_languages": {
        "GO": 1,
        "Go": 1,
        "go": 1,
        "Python": 1,
        "python": 1
      },
      "top_topics": {
        "Go": 1,
        "Python": 1
      },
      "last_updated": "2025-02-22T17:37:16.052058"
    }
  }
}